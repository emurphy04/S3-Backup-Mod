plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral() // needed for AWS SDK & Gson
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"s3-backup-mod" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

/** ---- Shade ONLY the AWS SDK ---- **/
configurations {
	// Dependencies placed in 'shade' are bundled into the final jar
	shade
	// Ensure shaded deps are also available on compile/dev runtime classpaths
	implementation.extendsFrom(shade)
}

dependencies {
	// Minecraft / Fabric
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// AWS SDK v2 â€” apply BOM to BOTH implementation and shade
	implementation platform("software.amazon.awssdk:bom:2.32.29")
	shade         platform("software.amazon.awssdk:bom:2.32.29")
	// Shade only the modules we need
	shade "software.amazon.awssdk:s3"
	shade "software.amazon.awssdk:url-connection-client"

	// JSON
	implementation "com.google.code.gson:gson:2.10.1"
}

processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName
	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

/** ---- Publishing (unchanged) ---- **/
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {
		// add if you publish somewhere
	}
}

/** ---- Shadow ONLY AWS, then remap ---- **/
tasks.shadowJar {
	archiveClassifier.set("all")
	// Only include the 'shade' configuration (NOT the whole runtimeClasspath)
	configurations = [project.configurations.shade]

	// Relocate AWS to avoid conflicts with other mods
	relocate 'software.amazon.awssdk', 'freesmelly.s3backup.shadow.software.amazon.awssdk'
	relocate 'org.reactivestreams',    'freesmelly.s3backup.shadow.org.reactivestreams'
}

tasks.remapJar {
	inputFile.set(tasks.shadowJar.archiveFile)
	archiveClassifier.set("") // final, remapped jar without "all"
}

tasks.build.dependsOn tasks.remapJar
